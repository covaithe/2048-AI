// Generated by CoffeeScript 1.7.1
var Bot,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

Bot = (function() {
  function Bot(grid) {
    this.grid = grid;
    this.getBestMove = __bind(this.getBestMove, this);
    console.log(this.grid);
    this.boardState = new BoardStateFactory().fromGrid(this.grid);
  }

  Bot.prototype.evaluate = function(boardState) {
    return boardState.emptySquares().length;
  };

  Bot.prototype.expectimax = function(boardState, depth, ourTurn) {
    var childScores, emptySquares, self, sum, x;
    self = this;
    if (depth === 0) {
      return this.evaluate(boardState);
    }
    if (ourTurn === false && boardState.emptySquares().length === 0) {
      return 0;
    }
    if (ourTurn) {
      childScores = boardState.legalMoves().map((function(_this) {
        return function(move) {
          return _this.expectimax(boardState.move(move), depth - 1, false);
        };
      })(this));
      return Math.max.apply(Math, childScores);
    } else {
      emptySquares = boardState.emptySquares();
      x = emptySquares.map(function(square) {
        return [[2, 0.9], [4, 0.1]].map(function(a) {
          var p, v;
          v = a[0], p = a[1];
          return p * self.expectimax(boardState.populateSquare(square, v), depth, true);
        });
      });
      x = _.flatten(x);
      sum = _.reduce(x, function(a, b) {
        return a + b;
      });
      return sum / x.length;
    }
  };

  Bot.prototype.getBestMove = function() {
    var moveScores, sortedScores;
    moveScores = this.boardState.legalMoves().map((function(_this) {
      return function(move) {
        return {
          move: move,
          score: _this.expectimax(_this.boardState.move(move), 1, false)
        };
      };
    })(this));
    console.log(moveScores);
    sortedScores = _.sortBy(moveScores, function(ms) {
      return ms.score;
    });
    return this.translateMove(sortedScores[0].move);
  };

  Bot.prototype.translateMove = function(move) {
    var moves;
    moves = {
      up: '0',
      right: '1',
      down: '2',
      left: '3'
    };
    return moves[move];
  };

  return Bot;

})();
