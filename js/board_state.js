// Generated by CoffeeScript 1.7.1
var BoardState, BoardStateFactory;

BoardState = (function() {
  function BoardState() {}

  BoardState.prototype.cell = function(col, row) {
    return this.rows[row - 1][col - 1];
  };

  return BoardState;

})();

BoardStateFactory = (function() {
  function BoardStateFactory() {}

  BoardStateFactory.prototype.fromGrid = function(grid) {
    var bs, col, row, v;
    bs = new BoardState();
    v = function(cell) {
      if (!cell) {
        return null;
      }
      return cell.value;
    };
    bs.rows = (function() {
      var _i, _results;
      _results = [];
      for (row = _i = 0; _i <= 3; row = ++_i) {
        _results.push((function() {
          var _j, _results1;
          _results1 = [];
          for (col = _j = 0; _j <= 3; col = ++_j) {
            _results1.push(v(grid.cells[col][row]));
          }
          return _results1;
        })());
      }
      return _results;
    })();
    this.doCols(bs);
    return bs;
  };

  BoardStateFactory.prototype.fromRows = function(rows) {
    var bs;
    bs = new BoardState();
    bs.rows = rows.map(function(row) {
      return row.slice(0);
    });
    this.doCols(bs);
    return bs;
  };

  BoardStateFactory.prototype.fromCols = function(cols) {
    var bs, col, row;
    bs = new BoardState();
    bs.cols = cols.map(function(col) {
      return col.slice(0);
    });
    bs.rows = (function() {
      var _i, _results;
      _results = [];
      for (row = _i = 0; _i <= 3; row = ++_i) {
        _results.push((function() {
          var _j, _results1;
          _results1 = [];
          for (col = _j = 0; _j <= 3; col = ++_j) {
            _results1.push(cols[col][row]);
          }
          return _results1;
        })());
      }
      return _results;
    })();
    return bs;
  };

  BoardStateFactory.prototype.doCols = function(bs) {
    var col, row;
    return bs.cols = (function() {
      var _i, _results;
      _results = [];
      for (col = _i = 0; _i <= 3; col = ++_i) {
        _results.push((function() {
          var _j, _results1;
          _results1 = [];
          for (row = _j = 0; _j <= 3; row = ++_j) {
            _results1.push(bs.rows[row][col]);
          }
          return _results1;
        })());
      }
      return _results;
    })();
  };

  return BoardStateFactory;

})();

this.BoardState = BoardState;

this.BoardStateFactory = BoardStateFactory;
